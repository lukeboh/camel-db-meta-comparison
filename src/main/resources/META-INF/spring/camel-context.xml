<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:camel="http://camel.apache.org/schema/spring"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd     http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">
    <bean class="br.jus.tse.corporativa.io.FileUtils" id="fileUtils" scope="singleton"/>
    <bean class="oracle.jdbc.pool.OracleDataSource"
        destroy-method="close" id="producao.dataSource">
        <property name="URL" value="${producao.URL}"/>
        <property name="user" value="${producao.user}"/>
        <property name="password" value="${producao.password}"/>
        <property name="connectionCachingEnabled" value="true"/>
    </bean>
    <bean class="oracle.jdbc.pool.OracleDataSource"
        destroy-method="close" id="simulado.dataSource">
        <property name="URL" value="${simulado.URL}"/>
        <property name="user" value="${simulado.user}"/>
        <property name="password" value="${simulado.password}"/>
        <property name="connectionCachingEnabled" value="true"/>
    </bean>
    <bean class="oracle.jdbc.pool.OracleDataSource"
        destroy-method="close" id="homologacao.dataSource">
        <property name="URL" value="${homologacao.URL}"/>
        <property name="user" value="${homologacao.user}"/>
        <property name="password" value="${homologacao.password}"/>
        <property name="connectionCachingEnabled" value="true"/>
    </bean>
    <bean class="oracle.jdbc.pool.OracleDataSource"
        destroy-method="close" id="desenvolvimento.dataSource">
        <property name="URL" value="${desenvolvimento.URL}"/>
        <property name="user" value="${desenvolvimento.user}"/>
        <property name="password" value="${desenvolvimento.password}"/>
        <property name="connectionCachingEnabled" value="true"/>
    </bean>
    <context:property-placeholder location="file:config.properties"/>
    <camel:camelContext id="camel-db-meta-comparison-context" xmlns="http://camel.apache.org/schema/spring">
        <propertyPlaceholder id="myPropertyPlaceholder" location="file:config.properties"/>
        <camel:route id="_routeMain" autoStartup="true">
            <camel:from id="_from0" uri="timer://timerMain?period=30m"/>
            <camel:to id="_toPrepare-git" uri="direct:prepare-git"/>
            <!-- PRODUCAO -->
            <camel:setHeader headerName="working-branch" id="_setHeader1">
                <constant>producao</constant>
            </camel:setHeader>
            <camel:setHeader headerName="working-datasource" id="_setHeader2">
                <camel:simple>ref:producao.dataSource</camel:simple>
            </camel:setHeader>
            <camel:to id="_toProducao" uri="direct:perBranch"/>
            <!-- SIMULADO -->
            <camel:setHeader headerName="working-branch" id="_setHeader3">
                <constant>simulado</constant>
            </camel:setHeader>
            <camel:setHeader headerName="working-datasource" id="_setHeader2">
                <camel:simple>ref:simulado.dataSource</camel:simple>
            </camel:setHeader>
            <camel:to id="_toSimulado" uri="direct:perBranch"/>
            <!-- HOMOLOGACAO -->
            <camel:setHeader headerName="working-branch" id="_setHeader4">
                <constant>homologacao</constant>
            </camel:setHeader>
            <camel:setHeader headerName="working-datasource" id="_setHeader2">
                <camel:simple>ref:homologacao.dataSource</camel:simple>
            </camel:setHeader>
            <camel:to id="_toHomologacao" uri="direct:perBranch"/>
            <!-- DESENVOLVIMENTO -->
            <camel:setHeader headerName="working-branch" id="_setHeader5">
                <constant>desenvolvimento</constant>
            </camel:setHeader>
            <camel:setHeader headerName="working-datasource" id="_setHeader2">
                <camel:simple>ref:desenvolvimento.dataSource</camel:simple>
            </camel:setHeader>
            <camel:to id="_toDesenvolvimento" uri="direct:perBranch"/>
            <camel:log id="_log7" message="********* FIM *********"/>
        </camel:route>
        <camel:route id="prepare-git">
            <camel:from id="_fromStartPrepareGit" uri="direct:prepare-git"/>
            <camel:to id="_toMkdirWork" uri="exec:mkdir?args=target/work -p"/>
            <camel:choice id="_choiceGitLocal">
                <camel:when id="_whenExisteGitLocal">
                    <camel:method
                        method="fileExists('target/work/git-repo-temp')" ref="fileUtils"/>
                    <camel:log id="_logGitPull" message="Repositorio Local existente: será feito git pull"/>
                    <camel:setHeader headerName="CamelExecCommandWorkingDir">
                		<camel:simple>target/work/git-repo-temp</camel:simple>
            		</camel:setHeader>
                    <camel:to id="_toGitPull" uri="exec:git?args=pull --all"/>
                    <camel:log id="_log3" message="Repositorio Git Atualizado"/>
                </camel:when>
                <camel:otherwise id="_otherwiseExisteGitLocal">
                    <camel:log id="_logGitClone" message="Repositorio Local inexistente: será feito git clone"/>
                    <camel:setHeader headerName="CamelExecCommandWorkingDir">
                		<camel:simple>target/work</camel:simple>
            		</camel:setHeader>
                    <camel:to id="_toGitClone" uri="exec:git?args=clone {{git.remotePath}} git-repo-temp"/>
                    <camel:log id="_log4" message="Repositorio Git Clonado"/>
                </camel:otherwise>
            </camel:choice>
        </camel:route>
        <camel:route id="_routePerBranch">
            <from id="_from2" uri="direct:perBranch"/>
            <log id="_log8" message="[$simple{in.header.working-branch}] Datasource: $simple{in.header.working-datasource}"/>
            <camel:to id="_toPrepare-branch-git" uri="direct:prepare-branch-git"/>
            <camel:to id="_toPrepare-branch-git" uri="direct:query-2-csv"/>
            <camel:to id="_to1" uri="direct:perform-git"/>
            <camel:to uri="direct:get-last-commit-time"/>
        </camel:route>
        <camel:route id="prepare-branch-git">
            <camel:from id="_fromStartPrepareGit" uri="direct:prepare-branch-git"/>
            <camel:log id="_log5" message="[$simple{in.header.working-branch}] Checkout da branch"/>
            <camel:recipientList id="_recipientListExec Git Checkout (URI DINAMICO)">
            	<!-- TODO Só na primeira vez que se roda em um repositorio sem as referidas branchs que tem que ter -b antes do nome da branch -->
                <camel:simple>exec:git?args=checkout ${in.header.working-branch} &amp;workingDir=target/work/git-repo-temp</camel:simple>
            </camel:recipientList>
        </camel:route>
        <camel:route id="query-2-csv">
            <camel:from id="_from-query" uri="direct:query-2-csv"/>
            
            <camel:setBody id="_setBodyQuery">
                <camel:constant>
			select dt.owner schema, 'TABLE' type, dt.owner owner, dt.TABLE_NAME object, ' ' as complement, tc.COMMENTS  
			  from SYS.DBA_TABLES dt 
			  left join SYS.DBA_TAB_COMMENTS tc on tc.TABLE_NAME = dt.TABLE_NAME and tc.OWNER = dt.OWNER
			 where dt.owner = 'ADMCAD'
			 order by 1, 2, 3 ,4
        		</camel:constant>
            </camel:setBody>
            <camel:log id="_log1" message="[$simple{in.header.working-branch}] Acessando o banco de dados para recuperar dados de tabelas"/>
            <camel:recipientList id="_recipientListJdbc JDBC (URI DINAMICO)">
                <camel:simple>jdbc:${in.header.working-branch}.dataSource</camel:simple>
            </camel:recipientList>
            <camel:marshal id="_marshalRStoCSV">
                <camel:csv>
                	<camel:header>SCHEMA</camel:header>
                	<camel:header>TYPE</camel:header>
                	<camel:header>OWNER</camel:header>
                	<camel:header>OBJECT</camel:header>
                	<camel:header>COMPLEMENT</camel:header>
                	<camel:header>COMMENTS</camel:header>
                </camel:csv>
            </camel:marshal>
            <camel:setHeader headerName="CamelFileName" id="_setHeaderCSVFileName">
                <camel:constant>table-metadata.csv</camel:constant>
            </camel:setHeader>
            <camel:to id="_toCSVFile" uri="file:target/work/git-repo-temp"/>
            <camel:log id="_log2" message="[$simple{in.header.working-branch}] Arquivo [$simple{in.header.CamelFileName}] gerado"/>
                        
            <camel:setBody id="_setBodyQuery">
                <camel:constant>
			select dtc.OWNER schema, 'COLUMN' type, dtc.table_name owner, dtc.column_name object, 
			       dtc.nullable || ' ' || 
			       dtc.data_type || case when dtc.data_type = 'NUMBER' and dtc.data_precision is not null then '(' || dtc.data_precision || ',' || dtc.data_scale || ')'
			                            when dtc.data_type like '%CHAR%' then '(' || dtc.data_length || ')'
			                            else null
			                       end as complement,
			       dcc.comments 
			  from dba_tab_columns dtc
			  left join dba_col_comments dcc on dcc.column_name = dtc.column_name
			                            and dcc.table_name  = dtc.table_name
			                            and dcc.OWNER = dtc.OWNER
			 where dtc.OWNER = 'ADMCAD'
			 order by 1, 2, 3 ,4
        		</camel:constant>
            </camel:setBody>
            <camel:log id="_log1" message="[$simple{in.header.working-branch}] Acessando o banco de dados"/>
            <camel:recipientList id="_recipientListJdbc JDBC (URI DINAMICO)">
                <camel:simple>jdbc:${in.header.working-branch}.dataSource</camel:simple>
            </camel:recipientList>
            <camel:marshal id="_marshalRStoCSV">
                <camel:csv>
                	<camel:header>SCHEMA</camel:header>
                	<camel:header>TYPE</camel:header>
                	<camel:header>OWNER</camel:header>
                	<camel:header>OBJECT</camel:header>
                	<camel:header>COMPLEMENT</camel:header>
                	<camel:header>COMMENTS</camel:header>
                </camel:csv>
            </camel:marshal>
            <camel:setHeader headerName="CamelFileName" id="_setHeaderCSVFileName">
                <camel:constant>column-metadata.csv</camel:constant>
            </camel:setHeader>
            <camel:to id="_toCSVFile" uri="file:target/work/git-repo-temp"/>
            <camel:log id="_log2" message="[$simple{in.header.working-branch}] Arquivo [$simple{in.header.CamelFileName}] gerado"/>
        </camel:route>
        <camel:route id="perform-git">
            <camel:from id="_from1" uri="direct:perform-git"/>
            <camel:setHeader headerName="CamelExecCommandWorkingDir">
                <camel:simple>target/work/git-repo-temp</camel:simple>
            </camel:setHeader>
            <camel:to id="_toGitAdd" uri="exec:git?args=add *.csv"/>
            <camel:to id="_toGitCommit" uri='exec:git?args=commit -a -m "[AUTOMATICO] Alterações detectadas"'/>
            <camel:recipientList id="_recipientListExec Git Push (URI DINAMICO)">
            	<camel:simple>exec:git?args=push --set-upstream origin ${in.header.working-branch} &amp;workingDir=target/work/git-repo-temp</camel:simple>
            </camel:recipientList>
            <camel:log id="_log6" message="[$simple{in.header.working-branch}] Git Commited and Pushed"/>
        </camel:route>
        <camel:route id="_get-last-commit-time">
            <from uri="direct:get-last-commit-time"/>
            <camel:setHeader headerName="CamelExecCommandArgs">
                <camel:simple>log -1 --format=%cd --date=relative ${in.header.working-branch}</camel:simple>
            </camel:setHeader>
            <camel:setHeader headerName="CamelExecCommandWorkingDir">
                <camel:simple>target/work/git-repo-temp</camel:simple>
            </camel:setHeader>
            <camel:to uri="exec:git"/>
            <convertBodyTo type="java.lang.String"/>
            <camel:log message="[${in.header.working-branch}] Última Alteração (Relativa): ${body}"/>
            <camel:setHeader headerName="$simple{in.header.working-branch}.last-commit-relative">
                <camel:simple>${body}</camel:simple>
            </camel:setHeader>
            <camel:setHeader headerName="CamelFileName">
                <camel:simple>${in.header.working-branch}.last-commit-relative.txt</camel:simple>
            </camel:setHeader>
            <camel:to uri="file:target/work"/>
            <camel:setHeader headerName="CamelExecCommandArgs">
                <camel:simple>log -1 --format=%cd --date=format:%d/%m/%Y ${in.header.working-branch}</camel:simple>
            </camel:setHeader>
            <camel:to uri="exec:git"/>
            <convertBodyTo type="java.lang.String"/>
            <camel:log message="[${in.header.working-branch}] Última Alteração (Data): ${body}"/>
            <camel:setHeader headerName="$simple{in.header.working-branch}.last-commit">
                <camel:simple>${body}</camel:simple>
            </camel:setHeader>
            <camel:setHeader headerName="CamelFileName">
                <camel:simple>${in.header.working-branch}.last-commit.txt</camel:simple>
            </camel:setHeader>
            <camel:to uri="file:target/work"/>
        </camel:route>
        
        <camel:route id="_get-diffs">
        	<camel:from uri="direct:get-diffs"/>
        	<camel:setHeader headerName="CamelExecCommandArgs">
                <camel:simple>diff --numstat homologacao:table-metadata.csv desenvolvimento:table-metadata.csv</camel:simple>
            </camel:setHeader>
            <camel:setHeader headerName="CamelExecCommandWorkingDir">
                <camel:simple>target/work/git-repo-temp</camel:simple>
            </camel:setHeader>
            <camel:to uri="exec:git"/>
            <convertBodyTo type="java.lang.String"/>
            <camel:log message="Diff: ${body}"/>
            <camel:setHeader headerName="table-metadata.homologacao.desenvolvimento">
                <camel:simple>${body}</camel:simple>
            </camel:setHeader>
            <to uri="log:debug?showHeaders=true&amp;multiline=true"/>
        </camel:route>
        
        <camel:route id="_routeTest" autoStartup="false">
            <camel:from uri="timer://timerMain?period=30m"/>
            <camel:to uri="direct:get-diffs"/>
        </camel:route>
    </camel:camelContext>
</beans>
